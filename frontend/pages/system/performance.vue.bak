<template>
  <div>
    <AppHeader />

    <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <!-- En-tête -->
      <div class="mb-6">
        <h1 class="text-3xl font-bold text-surface-900 dark:text-surface-50 mb-2">
          Rapport de Performances
        </h1>
        <p class="text-surface-600 dark:text-surface-400">
          Analyse des performances système et optimisations
        </p>
      </div>

      <!-- Rapport de performance en temps réel -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <!-- Métriques de cache -->
        <Card>
          <template #title>
            <div class="flex items-center">
              <i class="pi pi-database text-blue-500 mr-2"></i>
              Cache Performance
            </div>
          </template>
          <template #content>
            <div class="space-y-4">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Taux de hit</span>
                <span class="text-lg font-semibold text-green-600">
                  {{ Math.round(performanceReport.cache.hitRate) }}%
                </span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Taille du cache</span>
                <span class="text-lg font-semibold">{{ performanceReport.cache.size }} entrées</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Total requêtes</span>
                <span class="text-lg font-semibold">{{ performanceReport.cache.totalRequests }}</span>
              </div>
            </div>
          </template>
        </Card>

        <!-- Métriques API -->
        <Card>
          <template #title>
            <div class="flex items-center">
              <i class="pi pi-cloud text-orange-500 mr-2"></i>
              API Performance
            </div>
          </template>
          <template #content>
            <div class="space-y-4">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Appels API totaux</span>
                <span class="text-lg font-semibold">{{ performanceReport.api.totalCalls }}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Temps de réponse moyen</span>
                <span class="text-lg font-semibold text-blue-600">
                  {{ performanceReport.api.averageResponseTime }}ms
                </span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400">Taux de cache</span>
                <span class="text-lg font-semibold text-green-600">
                  {{ Math.round(performanceReport.api.cacheHitRate) }}%
                </span>
              </div>
            </div>
          </template>
        </Card>
      </div>

      <!-- Métriques mémoire -->
      <Card class="mb-6">
        <template #title>
          <div class="flex items-center">
            <i class="pi pi-server text-purple-500 mr-2"></i>
            Utilisation Mémoire
          </div>
        </template>
        <template #content>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600 mb-1">
                {{ formatBytes(performanceReport.memory.usage) }}
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Mémoire utilisée</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600 mb-1">
                {{ performanceReport.memory.cacheSize }}
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Entrées en cache</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600 mb-1">
                {{ formatDate(performanceReport.memory.lastUpdate) }}
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Dernière MAJ</div>
            </div>
          </div>
        </template>
      </Card>

      <!-- Actions -->
      <div class="flex gap-4">
        <Button
          label="Actualiser rapport"
          icon="pi pi-refresh"
          @click="refreshReport"
          :loading="loading"
        />
        <Button
          label="Nettoyer cache"
          icon="pi pi-trash"
          severity="warning"
          @click="clearCache"
        />
        <Button
          label="Force GC"
          icon="pi pi-cog"
          severity="secondary"
          @click="forceGarbageCollection"
        />
      </div>
    </main>
  </div>
</template>

<script setup>
import { usePerformanceOptimization } from '~/composables/usePerformanceOptimization'

// Métadonnées de la page
definePageMeta({
  title: 'Rapport de Performances',
  requiresAuth: true,
  adminRequired: true
})

const { getPerformanceReport, useMemoryOptimization } = usePerformanceOptimization()
const { forceGarbageCollection } = useMemoryOptimization()

// État réactif
const performanceReport = ref({
  cache: { hitRate: 0, size: 0, totalRequests: 0 },
  api: { totalCalls: 0, averageResponseTime: 0, cacheHitRate: 0 },
  memory: { usage: 0, cacheSize: 0, lastUpdate: new Date() }
})
const loading = ref(false)

// Méthodes
const refreshReport = async () => {
  loading.value = true
  try {
    await new Promise(resolve => setTimeout(resolve, 500)) // Simulation
    performanceReport.value = getPerformanceReport()
  } finally {
    loading.value = false
  }
}

const clearCache = () => {
  // Simulation du nettoyage de cache
  performanceReport.value.cache.size = 0
  performanceReport.value.cache.totalRequests = 0
  alert('Cache nettoyé avec succès')
}

const formatBytes = (bytes) => {
  if (bytes === 0) return '0 B'
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

const formatDate = (date) => {
  return new Date(date).toLocaleTimeString('fr-FR')
}

// Initialisation
onMounted(() => {
  refreshReport()

  // Auto-refresh toutes les 30 secondes
  const interval = setInterval(refreshReport, 30000)

  onUnmounted(() => {
    clearInterval(interval)
  })
})
</script>