{
  "version": 3,
  "sources": ["../../../../src/megamenu/style/MegaMenuStyle.js", "../../../../src/megamenu/BaseMegaMenu.vue", "../../../../src/megamenu/MegaMenuSub.vue", "../../../../src/megamenu/MegaMenuSub.vue", "../../../../src/megamenu/MegaMenu.vue", "../../../../src/megamenu/MegaMenu.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/megamenu';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst inlineStyles = {\n    rootList: ({ props }) => ({ 'max-height': props.scrollHeight, overflow: 'auto' })\n};\n\nconst classes = {\n    root: ({ instance }) => [\n        'p-megamenu p-component',\n        {\n            'p-megamenu-mobile': instance.queryMatches,\n            'p-megamenu-mobile-active': instance.mobileActive,\n            'p-megamenu-horizontal': instance.horizontal,\n            'p-megamenu-vertical': instance.vertical\n        }\n    ],\n    start: 'p-megamenu-start',\n    button: 'p-megamenu-button',\n    rootList: 'p-megamenu-root-list',\n    submenuLabel: ({ instance, processedItem }) => [\n        'p-megamenu-submenu-label',\n        {\n            'p-disabled': instance.isItemDisabled(processedItem)\n        }\n    ],\n    item: ({ instance, processedItem }) => [\n        'p-megamenu-item',\n        {\n            'p-megamenu-item-active': instance.isItemActive(processedItem),\n            'p-focus': instance.isItemFocused(processedItem),\n            'p-disabled': instance.isItemDisabled(processedItem)\n        }\n    ],\n    itemContent: 'p-megamenu-item-content',\n    itemLink: 'p-megamenu-item-link',\n    itemIcon: 'p-megamenu-item-icon',\n    itemLabel: 'p-megamenu-item-label',\n    submenuIcon: 'p-megamenu-submenu-icon',\n    overlay: 'p-megamenu-overlay',\n    grid: 'p-megamenu-grid',\n    column: ({ instance, processedItem }) => {\n        let length = instance.isItemGroup(processedItem) ? processedItem.items.length : 0;\n        let columnClass;\n\n        if (instance.$parentInstance.queryMatches) columnClass = 'p-megamenu-col-12';\n        else {\n            switch (length) {\n                case 2:\n                    columnClass = 'p-megamenu-col-6';\n                    break;\n\n                case 3:\n                    columnClass = 'p-megamenu-col-4';\n                    break;\n\n                case 4:\n                    columnClass = 'p-megamenu-col-3';\n                    break;\n\n                case 6:\n                    columnClass = 'p-megamenu-col-2';\n                    break;\n\n                default:\n                    columnClass = 'p-megamenu-col-12';\n                    break;\n            }\n        }\n\n        return columnClass;\n    },\n    submenu: 'p-megamenu-submenu',\n    separator: 'p-megamenu-separator',\n    end: 'p-megamenu-end'\n};\n\nexport default BaseStyle.extend({\n    name: 'megamenu',\n    style,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MegaMenuStyle from 'primevue/megamenu/style';\n\nexport default {\n    name: 'BaseMegaMenu',\n    extends: BaseComponent,\n    props: {\n        model: {\n            type: Array,\n            default: null\n        },\n        orientation: {\n            type: String,\n            default: 'horizontal'\n        },\n        breakpoint: {\n            type: String,\n            default: '960px'\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        scrollHeight: {\n            type: String,\n            default: '20rem'\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: MegaMenuStyle,\n    provide() {\n        return {\n            $pcMegaMenu: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <ul :class=\"level === 0 ? cx('rootList') : cx('submenu')\" :tabindex=\"tabindex\" v-bind=\"level === 0 ? ptm('rootList') : ptm('submenu')\">\n        <li v-if=\"submenu\" :class=\"[cx('submenuLabel', { submenu }), getItemProp(submenu, 'class')]\" :style=\"getItemProp(submenu, 'style')\" role=\"presentation\" v-bind=\"ptm('submenuLabel')\">{{ getItemLabel(submenu) }}</li>\n        <template v-for=\"(processedItem, index) of items\" :key=\"getItemKey(processedItem)\">\n            <li\n                v-if=\"isItemVisible(processedItem) && !getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                :class=\"[cx('item', { processedItem }), getItemProp(processedItem, 'class')]\"\n                role=\"menuitem\"\n                :aria-label=\"getItemLabel(processedItem)\"\n                :aria-disabled=\"isItemDisabled(processedItem) || undefined\"\n                :aria-expanded=\"isItemGroup(processedItem) ? isItemActive(processedItem) : undefined\"\n                :aria-haspopup=\"isItemGroup(processedItem) && !getItemProp(processedItem, 'to') ? 'menu' : undefined\"\n                :aria-level=\"level + 1\"\n                :aria-setsize=\"getAriaSetSize()\"\n                :aria-posinset=\"getAriaPosInset(index)\"\n                v-bind=\"getPTOptions(processedItem, index, 'item')\"\n                :data-p-active=\"isItemActive(processedItem)\"\n                :data-p-focused=\"isItemFocused(processedItem)\"\n                :data-p-disabled=\"isItemDisabled(processedItem)\"\n            >\n                <div :class=\"cx('itemContent')\" @click=\"onItemClick($event, processedItem)\" @mouseenter=\"onItemMouseEnter($event, processedItem)\" v-bind=\"getPTOptions(processedItem, index, 'itemContent')\">\n                    <template v-if=\"!templates.item\">\n                        <a v-ripple :href=\"getItemProp(processedItem, 'url')\" :class=\"cx('itemLink')\" :target=\"getItemProp(processedItem, 'target')\" tabindex=\"-1\" v-bind=\"getPTOptions(processedItem, index, 'itemLink')\">\n                            <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"processedItem.item\" :class=\"cx('itemIcon')\" />\n                            <span v-else-if=\"getItemProp(processedItem, 'icon')\" :class=\"[cx('itemIcon'), getItemProp(processedItem, 'icon')]\" v-bind=\"getPTOptions(processedItem, index, 'itemIcon')\" />\n                            <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions(processedItem, index, 'itemLabel')\">\n                                {{ getItemLabel(processedItem) }}\n                            </span>\n                            <template v-if=\"isItemGroup(processedItem)\">\n                                <component v-if=\"templates.submenuicon\" :is=\"templates.submenuicon\" :active=\"isItemActive(processedItem)\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions(processedItem, index, 'submenuIcon')\" />\n                                <component v-else :is=\"horizontal || mobileActive ? 'AngleDownIcon' : 'AngleRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions(processedItem, index, 'submenuIcon')\" />\n                            </template>\n                        </a>\n                    </template>\n                    <component v-else :is=\"templates.item\" :item=\"processedItem.item\" :hasSubmenu=\"isItemGroup(processedItem)\" :label=\"getItemLabel(processedItem)\" :props=\"getMenuItemProps(processedItem, index)\"></component>\n                </div>\n                <div v-if=\"isItemVisible(processedItem) && isItemGroup(processedItem)\" :class=\"cx('overlay')\" v-bind=\"ptm('overlay')\">\n                    <div :class=\"cx('grid')\" v-bind=\"ptm('grid')\">\n                        <div v-for=\"col of processedItem.items\" :key=\"getItemKey(col)\" :class=\"cx('column', { processedItem })\" v-bind=\"ptm('column')\">\n                            <MegaMenuSub\n                                v-for=\"submenu of col\"\n                                :key=\"getSubListKey(submenu)\"\n                                :id=\"getSubListId(submenu)\"\n                                :style=\"sx('submenu', true, { processedItem })\"\n                                role=\"menu\"\n                                :menuId=\"menuId\"\n                                :focusedItemId=\"focusedItemId\"\n                                :submenu=\"submenu\"\n                                :items=\"submenu.items\"\n                                :templates=\"templates\"\n                                :level=\"level + 1\"\n                                :mobileActive=\"mobileActive\"\n                                :pt=\"pt\"\n                                :unstyled=\"unstyled\"\n                                @item-click=\"$emit('item-click', $event)\"\n                                @item-mouseenter=\"$emit('item-mouseenter', $event)\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li\n                v-if=\"isItemVisible(processedItem) && getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :class=\"[cx('separator'), getItemProp(processedItem, 'class')]\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                role=\"separator\"\n                v-bind=\"ptm('separator')\"\n            ></li>\n        </template>\n    </ul>\n</template>\n\n<script>\nimport { isNotEmpty, resolve } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleRightIcon from '@primevue/icons/angleright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'MegaMenuSub',\n    hostName: 'MegaMenu',\n    extends: BaseComponent,\n    emits: ['item-click', 'item-mouseenter'],\n    props: {\n        menuId: {\n            type: String,\n            default: null\n        },\n        focusedItemId: {\n            type: String,\n            default: null\n        },\n        horizontal: {\n            type: Boolean,\n            default: false\n        },\n        submenu: {\n            type: Object,\n            default: null\n        },\n        mobileActive: {\n            type: Boolean,\n            default: false\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        activeItem: {\n            type: Object,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        }\n    },\n    methods: {\n        getSubListId(processedItem) {\n            return `${this.getItemId(processedItem)}_list`;\n        },\n        getSubListKey(processedItem) {\n            return this.getSubListId(processedItem);\n        },\n        getItemId(processedItem) {\n            return `${this.menuId}_${processedItem.key}`;\n        },\n        getItemKey(processedItem) {\n            return this.getItemId(processedItem);\n        },\n        getItemProp(processedItem, name, params) {\n            return processedItem && processedItem.item ? resolve(processedItem.item[name], params) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        getPTOptions(processedItem, index, key) {\n            return this.ptm(key, {\n                context: {\n                    item: processedItem.item,\n                    index,\n                    active: this.isItemActive(processedItem),\n                    focused: this.isItemFocused(processedItem),\n                    disabled: this.isItemDisabled(processedItem)\n                }\n            });\n        },\n        isItemActive(processedItem) {\n            return isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemFocused(processedItem) {\n            return this.focusedItemId === this.getItemId(processedItem);\n        },\n        isItemGroup(processedItem) {\n            return isNotEmpty(processedItem.items);\n        },\n        onItemClick(event, processedItem) {\n            this.getItemProp(processedItem, 'command', { originalEvent: event, item: processedItem.item });\n            this.$emit('item-click', { originalEvent: event, processedItem, isFocus: true });\n        },\n        onItemMouseEnter(event, processedItem) {\n            this.$emit('item-mouseenter', { originalEvent: event, processedItem });\n        },\n        getAriaSetSize() {\n            return this.items.filter((processedItem) => this.isItemVisible(processedItem) && !this.getItemProp(processedItem, 'separator')).length;\n        },\n        getAriaPosInset(index) {\n            return index - this.items.slice(0, index).filter((processedItem) => this.isItemVisible(processedItem) && this.getItemProp(processedItem, 'separator')).length + 1;\n        },\n        getMenuItemProps(processedItem, index) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: -1\n                    },\n                    this.getPTOptions(processedItem, index, 'itemLink')\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), this.getItemProp(processedItem, 'icon')]\n                    },\n                    this.getPTOptions(processedItem, index, 'itemIcon')\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('label')\n                    },\n                    this.getPTOptions(processedItem, index, 'label')\n                ),\n                submenuicon: mergeProps(\n                    {\n                        class: this.cx('submenuIcon')\n                    },\n                    this.getPTOptions(processedItem, index, 'submenuIcon')\n                )\n            };\n        }\n    },\n    components: {\n        AngleRightIcon: AngleRightIcon,\n        AngleDownIcon: AngleDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <ul :class=\"level === 0 ? cx('rootList') : cx('submenu')\" :tabindex=\"tabindex\" v-bind=\"level === 0 ? ptm('rootList') : ptm('submenu')\">\n        <li v-if=\"submenu\" :class=\"[cx('submenuLabel', { submenu }), getItemProp(submenu, 'class')]\" :style=\"getItemProp(submenu, 'style')\" role=\"presentation\" v-bind=\"ptm('submenuLabel')\">{{ getItemLabel(submenu) }}</li>\n        <template v-for=\"(processedItem, index) of items\" :key=\"getItemKey(processedItem)\">\n            <li\n                v-if=\"isItemVisible(processedItem) && !getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                :class=\"[cx('item', { processedItem }), getItemProp(processedItem, 'class')]\"\n                role=\"menuitem\"\n                :aria-label=\"getItemLabel(processedItem)\"\n                :aria-disabled=\"isItemDisabled(processedItem) || undefined\"\n                :aria-expanded=\"isItemGroup(processedItem) ? isItemActive(processedItem) : undefined\"\n                :aria-haspopup=\"isItemGroup(processedItem) && !getItemProp(processedItem, 'to') ? 'menu' : undefined\"\n                :aria-level=\"level + 1\"\n                :aria-setsize=\"getAriaSetSize()\"\n                :aria-posinset=\"getAriaPosInset(index)\"\n                v-bind=\"getPTOptions(processedItem, index, 'item')\"\n                :data-p-active=\"isItemActive(processedItem)\"\n                :data-p-focused=\"isItemFocused(processedItem)\"\n                :data-p-disabled=\"isItemDisabled(processedItem)\"\n            >\n                <div :class=\"cx('itemContent')\" @click=\"onItemClick($event, processedItem)\" @mouseenter=\"onItemMouseEnter($event, processedItem)\" v-bind=\"getPTOptions(processedItem, index, 'itemContent')\">\n                    <template v-if=\"!templates.item\">\n                        <a v-ripple :href=\"getItemProp(processedItem, 'url')\" :class=\"cx('itemLink')\" :target=\"getItemProp(processedItem, 'target')\" tabindex=\"-1\" v-bind=\"getPTOptions(processedItem, index, 'itemLink')\">\n                            <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"processedItem.item\" :class=\"cx('itemIcon')\" />\n                            <span v-else-if=\"getItemProp(processedItem, 'icon')\" :class=\"[cx('itemIcon'), getItemProp(processedItem, 'icon')]\" v-bind=\"getPTOptions(processedItem, index, 'itemIcon')\" />\n                            <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions(processedItem, index, 'itemLabel')\">\n                                {{ getItemLabel(processedItem) }}\n                            </span>\n                            <template v-if=\"isItemGroup(processedItem)\">\n                                <component v-if=\"templates.submenuicon\" :is=\"templates.submenuicon\" :active=\"isItemActive(processedItem)\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions(processedItem, index, 'submenuIcon')\" />\n                                <component v-else :is=\"horizontal || mobileActive ? 'AngleDownIcon' : 'AngleRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions(processedItem, index, 'submenuIcon')\" />\n                            </template>\n                        </a>\n                    </template>\n                    <component v-else :is=\"templates.item\" :item=\"processedItem.item\" :hasSubmenu=\"isItemGroup(processedItem)\" :label=\"getItemLabel(processedItem)\" :props=\"getMenuItemProps(processedItem, index)\"></component>\n                </div>\n                <div v-if=\"isItemVisible(processedItem) && isItemGroup(processedItem)\" :class=\"cx('overlay')\" v-bind=\"ptm('overlay')\">\n                    <div :class=\"cx('grid')\" v-bind=\"ptm('grid')\">\n                        <div v-for=\"col of processedItem.items\" :key=\"getItemKey(col)\" :class=\"cx('column', { processedItem })\" v-bind=\"ptm('column')\">\n                            <MegaMenuSub\n                                v-for=\"submenu of col\"\n                                :key=\"getSubListKey(submenu)\"\n                                :id=\"getSubListId(submenu)\"\n                                :style=\"sx('submenu', true, { processedItem })\"\n                                role=\"menu\"\n                                :menuId=\"menuId\"\n                                :focusedItemId=\"focusedItemId\"\n                                :submenu=\"submenu\"\n                                :items=\"submenu.items\"\n                                :templates=\"templates\"\n                                :level=\"level + 1\"\n                                :mobileActive=\"mobileActive\"\n                                :pt=\"pt\"\n                                :unstyled=\"unstyled\"\n                                @item-click=\"$emit('item-click', $event)\"\n                                @item-mouseenter=\"$emit('item-mouseenter', $event)\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li\n                v-if=\"isItemVisible(processedItem) && getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :class=\"[cx('separator'), getItemProp(processedItem, 'class')]\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                role=\"separator\"\n                v-bind=\"ptm('separator')\"\n            ></li>\n        </template>\n    </ul>\n</template>\n\n<script>\nimport { isNotEmpty, resolve } from '@primeuix/utils/object';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleRightIcon from '@primevue/icons/angleright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'MegaMenuSub',\n    hostName: 'MegaMenu',\n    extends: BaseComponent,\n    emits: ['item-click', 'item-mouseenter'],\n    props: {\n        menuId: {\n            type: String,\n            default: null\n        },\n        focusedItemId: {\n            type: String,\n            default: null\n        },\n        horizontal: {\n            type: Boolean,\n            default: false\n        },\n        submenu: {\n            type: Object,\n            default: null\n        },\n        mobileActive: {\n            type: Boolean,\n            default: false\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        activeItem: {\n            type: Object,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        }\n    },\n    methods: {\n        getSubListId(processedItem) {\n            return `${this.getItemId(processedItem)}_list`;\n        },\n        getSubListKey(processedItem) {\n            return this.getSubListId(processedItem);\n        },\n        getItemId(processedItem) {\n            return `${this.menuId}_${processedItem.key}`;\n        },\n        getItemKey(processedItem) {\n            return this.getItemId(processedItem);\n        },\n        getItemProp(processedItem, name, params) {\n            return processedItem && processedItem.item ? resolve(processedItem.item[name], params) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        getPTOptions(processedItem, index, key) {\n            return this.ptm(key, {\n                context: {\n                    item: processedItem.item,\n                    index,\n                    active: this.isItemActive(processedItem),\n                    focused: this.isItemFocused(processedItem),\n                    disabled: this.isItemDisabled(processedItem)\n                }\n            });\n        },\n        isItemActive(processedItem) {\n            return isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemFocused(processedItem) {\n            return this.focusedItemId === this.getItemId(processedItem);\n        },\n        isItemGroup(processedItem) {\n            return isNotEmpty(processedItem.items);\n        },\n        onItemClick(event, processedItem) {\n            this.getItemProp(processedItem, 'command', { originalEvent: event, item: processedItem.item });\n            this.$emit('item-click', { originalEvent: event, processedItem, isFocus: true });\n        },\n        onItemMouseEnter(event, processedItem) {\n            this.$emit('item-mouseenter', { originalEvent: event, processedItem });\n        },\n        getAriaSetSize() {\n            return this.items.filter((processedItem) => this.isItemVisible(processedItem) && !this.getItemProp(processedItem, 'separator')).length;\n        },\n        getAriaPosInset(index) {\n            return index - this.items.slice(0, index).filter((processedItem) => this.isItemVisible(processedItem) && this.getItemProp(processedItem, 'separator')).length + 1;\n        },\n        getMenuItemProps(processedItem, index) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: -1\n                    },\n                    this.getPTOptions(processedItem, index, 'itemLink')\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), this.getItemProp(processedItem, 'icon')]\n                    },\n                    this.getPTOptions(processedItem, index, 'itemIcon')\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('label')\n                    },\n                    this.getPTOptions(processedItem, index, 'label')\n                ),\n                submenuicon: mergeProps(\n                    {\n                        class: this.cx('submenuIcon')\n                    },\n                    this.getPTOptions(processedItem, index, 'submenuIcon')\n                )\n            };\n        }\n    },\n    components: {\n        AngleRightIcon: AngleRightIcon,\n        AngleDownIcon: AngleDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div :ref=\"containerRef\" :id=\"$id\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div v-if=\"$slots.start\" :class=\"cx('start')\" v-bind=\"ptm('start')\">\n            <slot name=\"start\"></slot>\n        </div>\n        <!--TODO: menubutton deprecated since v4.0. Use button-->\n        <slot :id=\"$id\" :name=\"$slots.button ? 'button' : 'menubutton'\" :class=\"cx('button')\" :toggleCallback=\"(event) => menuButtonClick(event)\">\n            <a\n                v-if=\"model && model.length > 0\"\n                ref=\"menubutton\"\n                role=\"button\"\n                tabindex=\"0\"\n                :class=\"cx('button')\"\n                :aria-haspopup=\"model.length && model.length > 0 ? true : false\"\n                :aria-expanded=\"mobileActive\"\n                :aria-controls=\"$id\"\n                :aria-label=\"$primevue.config.locale.aria?.navigation\"\n                @click=\"menuButtonClick($event)\"\n                @keydown=\"menuButtonKeydown($event)\"\n                v-bind=\"ptm('button')\"\n            >\n                <!--TODO: menubuttonicon deprecated since v4.0. Use buttonicon-->\n                <slot :name=\"$slots.buttonicon ? 'buttonicon' : 'menubuttonicon'\">\n                    <BarsIcon v-bind=\"ptm('buttonIcon')\" />\n                </slot>\n            </a>\n        </slot>\n        <MegaMenuSub\n            :ref=\"menubarRef\"\n            :id=\"$id + '_list'\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            role=\"menubar\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-disabled=\"disabled || undefined\"\n            :aria-orientation=\"orientation\"\n            :aria-activedescendant=\"focused ? focusedItemId : undefined\"\n            :menuId=\"$id\"\n            :focusedItemId=\"focused ? focusedItemId : undefined\"\n            :items=\"processedItems\"\n            :horizontal=\"horizontal\"\n            :templates=\"$slots\"\n            :activeItem=\"activeItem\"\n            :mobileActive=\"mobileActive\"\n            :level=\"0\"\n            :style=\"sx('rootList')\"\n            :pt=\"pt\"\n            :unstyled=\"unstyled\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @item-click=\"onItemClick\"\n            @item-mouseenter=\"onItemMouseEnter\"\n        />\n        <div v-if=\"$slots.end\" :class=\"cx('end')\" v-bind=\"ptm('end')\">\n            <slot name=\"end\"></slot>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { findSingle, focus, isTouchDevice } from '@primeuix/utils/dom';\nimport { findLastIndex, isEmpty, isNotEmpty, isPrintableCharacter, resolve } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BarsIcon from '@primevue/icons/bars';\nimport BaseMegaMenu from './BaseMegaMenu.vue';\nimport MegaMenuSub from './MegaMenuSub.vue';\n\nexport default {\n    name: 'MegaMenu',\n    extends: BaseMegaMenu,\n    inheritAttrs: false,\n    emits: ['focus', 'blur'],\n    outsideClickListener: null,\n    resizeListener: null,\n    matchMediaListener: null,\n    container: null,\n    menubar: null,\n    searchTimeout: null,\n    searchValue: null,\n    data() {\n        return {\n            mobileActive: false,\n            focused: false,\n            focusedItemInfo: { index: -1, key: '', parentKey: '' },\n            activeItem: null,\n            dirty: false,\n            query: null,\n            queryMatches: false\n        };\n    },\n    watch: {\n        activeItem(newItem) {\n            if (isNotEmpty(newItem)) {\n                this.bindOutsideClickListener();\n                this.bindResizeListener();\n            } else {\n                this.unbindOutsideClickListener();\n                this.unbindResizeListener();\n            }\n        }\n    },\n    mounted() {\n        this.bindMatchMediaListener();\n    },\n    beforeUnmount() {\n        this.mobileActive = false;\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n        this.unbindMatchMediaListener();\n    },\n    methods: {\n        getItemProp(item, name) {\n            return item ? resolve(item[name]) : undefined;\n        },\n        getItemLabel(item) {\n            return this.getItemProp(item, 'label');\n        },\n        isItemDisabled(item) {\n            return this.getItemProp(item, 'disabled');\n        },\n        isItemVisible(item) {\n            return this.getItemProp(item, 'visible') !== false;\n        },\n        isItemGroup(item) {\n            return isNotEmpty(this.getItemProp(item, 'items'));\n        },\n        isItemSeparator(item) {\n            return this.getItemProp(item, 'separator');\n        },\n        getProccessedItemLabel(processedItem) {\n            return processedItem ? this.getItemLabel(processedItem.item) : undefined;\n        },\n        isProccessedItemGroup(processedItem) {\n            return processedItem && isNotEmpty(processedItem.items);\n        },\n        toggle(event) {\n            if (this.mobileActive) {\n                this.mobileActive = false;\n                ZIndex.clear(this.menubar);\n                this.hide();\n            } else {\n                this.mobileActive = true;\n                ZIndex.set('menu', this.menubar, this.$primevue.config.zIndex.menu);\n                setTimeout(() => {\n                    this.show();\n                }, 1);\n            }\n\n            this.bindOutsideClickListener();\n            event.preventDefault();\n        },\n        show() {\n            this.focusedItemInfo = { index: this.findFirstFocusedItemIndex(), level: 0, parentKey: '' };\n\n            focus(this.menubar);\n        },\n        hide(event, isFocus) {\n            if (this.mobileActive) {\n                this.mobileActive = false;\n                setTimeout(() => {\n                    focus(this.$refs.menubutton, { preventScroll: true });\n                }, 1);\n            }\n\n            this.activeItem = null;\n            this.focusedItemInfo = { index: -1, key: '', parentKey: '' };\n\n            isFocus && focus(this.menubar);\n            this.dirty = false;\n        },\n        onFocus(event) {\n            this.focused = true;\n\n            if (this.focusedItemInfo.index === -1) {\n                const index = this.findFirstFocusedItemIndex();\n                const processedItem = this.findVisibleItem(index);\n\n                this.focusedItemInfo = { index, key: processedItem.key, parentKey: processedItem.parentKey };\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedItemInfo = { index: -1, key: '', parentKey: '' };\n            this.searchValue = '';\n            this.dirty = false;\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'PageDown':\n                case 'PageUp':\n                case 'Backspace':\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchItems(event, event.key);\n                    }\n\n                    break;\n            }\n        },\n        onItemChange(event) {\n            const { processedItem, isFocus } = event;\n\n            if (isEmpty(processedItem)) return;\n\n            const { index, key, parentKey, items } = processedItem;\n            const grouped = isNotEmpty(items);\n\n            grouped && (this.activeItem = processedItem);\n            this.focusedItemInfo = { index, key, parentKey };\n\n            grouped && (this.dirty = true);\n            isFocus && focus(this.menubar);\n        },\n        onItemClick(event) {\n            const { originalEvent, processedItem } = event;\n            const grouped = this.isProccessedItemGroup(processedItem);\n            const root = isEmpty(processedItem.parent);\n            const selected = this.isSelected(processedItem);\n\n            if (selected) {\n                const { index, key, parentKey } = processedItem;\n\n                this.activeItem = null;\n                this.focusedItemInfo = { index, key, parentKey };\n\n                this.dirty = !root;\n\n                if (!this.mobileActive) {\n                    focus(this.menubar, { preventScroll: true });\n                }\n            } else {\n                if (grouped) {\n                    this.onItemChange(event);\n                } else {\n                    this.hide(originalEvent);\n                }\n            }\n        },\n        onItemMouseEnter(event) {\n            if (!this.mobileActive && this.dirty) {\n                this.onItemChange(event);\n            }\n        },\n        menuButtonClick(event) {\n            this.toggle(event);\n        },\n        menuButtonKeydown(event) {\n            (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && this.menuButtonClick(event);\n        },\n        onArrowDownKey(event) {\n            if (this.horizontal) {\n                if (isNotEmpty(this.activeItem) && this.activeItem.key === this.focusedItemInfo.key) {\n                    this.focusedItemInfo = { index: -1, key: '', parentKey: this.activeItem.key };\n                } else {\n                    const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                    const grouped = this.isProccessedItemGroup(processedItem);\n\n                    if (grouped) {\n                        this.onItemChange({ originalEvent: event, processedItem });\n                        this.focusedItemInfo = { index: -1, key: processedItem.key, parentKey: processedItem.parentKey };\n                        this.searchValue = '';\n                    }\n                }\n            }\n\n            const itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n\n            this.changeFocusedItemInfo(event, itemIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (event.altKey && this.horizontal) {\n                if (this.focusedItemInfo.index !== -1) {\n                    const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                    const grouped = this.isProccessedItemGroup(processedItem);\n\n                    if (!grouped && isNotEmpty(this.activeItem)) {\n                        if (this.focusedItemInfo.index === 0) {\n                            this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key, parentKey: this.activeItem.parentKey };\n                            this.activeItem = null;\n                        } else {\n                            this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            } else {\n                const itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n\n                this.changeFocusedItemInfo(event, itemIndex);\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n            const grouped = this.isProccessedItemGroup(processedItem);\n\n            if (grouped) {\n                if (this.horizontal) {\n                    const itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n\n                    this.changeFocusedItemInfo(event, itemIndex);\n                }\n            } else {\n                if (this.vertical && isNotEmpty(this.activeItem)) {\n                    if (processedItem.columnIndex === 0) {\n                        this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key, parentKey: this.activeItem.parentKey };\n                        this.activeItem = null;\n                    }\n                }\n\n                const columnIndex = processedItem.columnIndex - 1;\n                const itemIndex = this.visibleItems.findIndex((item) => item.columnIndex === columnIndex);\n\n                itemIndex !== -1 && this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n            const grouped = this.isProccessedItemGroup(processedItem);\n\n            if (grouped) {\n                if (this.vertical) {\n                    if (isNotEmpty(this.activeItem) && this.activeItem.key === processedItem.key) {\n                        this.focusedItemInfo = { index: -1, key: '', parentKey: this.activeItem.key };\n                    } else {\n                        const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                        const grouped = this.isProccessedItemGroup(processedItem);\n\n                        if (grouped) {\n                            this.onItemChange({ originalEvent: event, processedItem });\n                            this.focusedItemInfo = { index: -1, key: processedItem.key, parentKey: processedItem.parentKey };\n                            this.searchValue = '';\n                        }\n                    }\n                }\n\n                const itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n\n                this.changeFocusedItemInfo(event, itemIndex);\n            } else {\n                const columnIndex = processedItem.columnIndex + 1;\n                const itemIndex = this.visibleItems.findIndex((item) => item.columnIndex === columnIndex);\n\n                itemIndex !== -1 && this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            event.preventDefault();\n        },\n        onHomeKey(event) {\n            this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedItemInfo(event, this.findLastItemIndex());\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedItemInfo.index !== -1) {\n                const element = findSingle(this.menubar, `li[id=\"${`${this.focusedItemId}`}\"]`);\n                const anchorElement = element && findSingle(element, 'a[data-pc-section=\"itemlink\"]');\n\n                anchorElement ? anchorElement.click() : element && element.click();\n\n                const processedItem = this.visibleItems[this.focusedItemInfo.index];\n                const grouped = this.isProccessedItemGroup(processedItem);\n\n                !grouped && this.changeFocusedItemInfo(event, this.findFirstFocusedItemIndex());\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        onEscapeKey(event) {\n            if (isNotEmpty(this.activeItem)) {\n                this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key };\n                this.activeItem = null;\n            }\n\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedItemInfo.index !== -1) {\n                const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                const grouped = this.isProccessedItemGroup(processedItem);\n\n                !grouped && this.onItemChange({ originalEvent: event, processedItem });\n            }\n\n            this.hide();\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    const isOutsideContainer = this.container && !this.container.contains(event.target);\n                    const isOutsideTarget = !(this.target && (this.target === event.target || this.target.contains(event.target)));\n\n                    if (isOutsideContainer && isOutsideTarget) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = (event) => {\n                    if (!isTouchDevice()) {\n                        this.hide(event, true);\n                    }\n\n                    this.mobileActive = false;\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        bindMatchMediaListener() {\n            if (!this.matchMediaListener) {\n                const query = matchMedia(`(max-width: ${this.breakpoint})`);\n\n                this.query = query;\n                this.queryMatches = query.matches;\n\n                this.matchMediaListener = () => {\n                    this.queryMatches = query.matches;\n                    this.mobileActive = false;\n                };\n\n                this.query.addEventListener('change', this.matchMediaListener);\n            }\n        },\n        unbindMatchMediaListener() {\n            if (this.matchMediaListener) {\n                this.query.removeEventListener('change', this.matchMediaListener);\n                this.matchMediaListener = null;\n            }\n        },\n        isItemMatched(processedItem) {\n            return this.isValidItem(processedItem) && this.getProccessedItemLabel(processedItem)?.toLocaleLowerCase().startsWith(this.searchValue.toLocaleLowerCase());\n        },\n        isValidItem(processedItem) {\n            return !!processedItem && !this.isItemDisabled(processedItem.item) && !this.isItemSeparator(processedItem.item) && this.isItemVisible(processedItem.item);\n        },\n        isValidSelectedItem(processedItem) {\n            return this.isValidItem(processedItem) && this.isSelected(processedItem);\n        },\n        isSelected(processedItem) {\n            return isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n        },\n        findFirstItemIndex() {\n            return this.visibleItems.findIndex((processedItem) => this.isValidItem(processedItem));\n        },\n        findLastItemIndex() {\n            return findLastIndex(this.visibleItems, (processedItem) => this.isValidItem(processedItem));\n        },\n        findNextItemIndex(index) {\n            const matchedItemIndex = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).findIndex((processedItem) => this.isValidItem(processedItem)) : -1;\n\n            return matchedItemIndex > -1 ? matchedItemIndex + index + 1 : index;\n        },\n        findPrevItemIndex(index) {\n            const matchedItemIndex = index > 0 ? findLastIndex(this.visibleItems.slice(0, index), (processedItem) => this.isValidItem(processedItem)) : -1;\n\n            return matchedItemIndex > -1 ? matchedItemIndex : index;\n        },\n        findSelectedItemIndex() {\n            return this.visibleItems.findIndex((processedItem) => this.isValidSelectedItem(processedItem));\n        },\n        findFirstFocusedItemIndex() {\n            const selectedIndex = this.findSelectedItemIndex();\n\n            return selectedIndex < 0 ? this.findFirstItemIndex() : selectedIndex;\n        },\n        findLastFocusedItemIndex() {\n            const selectedIndex = this.findSelectedItemIndex();\n\n            return selectedIndex < 0 ? this.findLastItemIndex() : selectedIndex;\n        },\n        findVisibleItem(index) {\n            return isNotEmpty(this.visibleItems) ? this.visibleItems[index] : null;\n        },\n        searchItems(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let itemIndex = -1;\n            let matched = false;\n\n            if (this.focusedItemInfo.index !== -1) {\n                itemIndex = this.visibleItems.slice(this.focusedItemInfo.index).findIndex((processedItem) => this.isItemMatched(processedItem));\n                itemIndex = itemIndex === -1 ? this.visibleItems.slice(0, this.focusedItemInfo.index).findIndex((processedItem) => this.isItemMatched(processedItem)) : itemIndex + this.focusedItemInfo.index;\n            } else {\n                itemIndex = this.visibleItems.findIndex((processedItem) => this.isItemMatched(processedItem));\n            }\n\n            if (itemIndex !== -1) {\n                matched = true;\n            }\n\n            if (itemIndex === -1 && this.focusedItemInfo.index === -1) {\n                itemIndex = this.findFirstFocusedItemIndex();\n            }\n\n            if (itemIndex !== -1) {\n                this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedItemInfo(event, index) {\n            const processedItem = this.findVisibleItem(index);\n\n            this.focusedItemInfo.index = index;\n            this.focusedItemInfo.key = isNotEmpty(processedItem) ? processedItem.key : '';\n            this.scrollInView();\n        },\n        scrollInView(index = -1) {\n            const id = index !== -1 ? `${this.$id}_${index}` : this.focusedItemId;\n            let element;\n\n            if (id === null && this.queryMatches) {\n                element = this.$refs.menubutton;\n            } else {\n                element = findSingle(this.menubar, `li[id=\"${id}\"]`);\n            }\n\n            if (element) {\n                element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n            }\n        },\n        createProcessedItems(items, level = 0, parent = {}, parentKey = '', columnIndex) {\n            const processedItems = [];\n\n            items &&\n                items.forEach((item, index) => {\n                    const key = (parentKey !== '' ? parentKey + '_' : '') + (columnIndex !== undefined ? columnIndex + '_' : '') + index;\n                    const newItem = {\n                        item,\n                        index,\n                        level,\n                        key,\n                        parent,\n                        parentKey,\n                        columnIndex: columnIndex !== undefined ? columnIndex : parent.columnIndex !== undefined ? parent.columnIndex : index\n                    };\n\n                    newItem['items'] =\n                        level === 0 && item.items && item.items.length > 0 ? item.items.map((_items, _index) => this.createProcessedItems(_items, level + 1, newItem, key, _index)) : this.createProcessedItems(item.items, level + 1, newItem, key);\n                    processedItems.push(newItem);\n                });\n\n            return processedItems;\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        menubarRef(el) {\n            this.menubar = el ? el.$el : undefined;\n        }\n    },\n    computed: {\n        processedItems() {\n            return this.createProcessedItems(this.model || []);\n        },\n        visibleItems() {\n            const processedItem = isNotEmpty(this.activeItem) ? this.activeItem : null;\n\n            return processedItem && processedItem.key === this.focusedItemInfo.parentKey\n                ? processedItem.items.reduce((items, col) => {\n                      col.forEach((submenu) => {\n                          submenu.items.forEach((a) => {\n                              items.push(a);\n                          });\n                      });\n\n                      return items;\n                  }, [])\n                : this.processedItems;\n        },\n        horizontal() {\n            return this.orientation === 'horizontal';\n        },\n        vertical() {\n            return this.orientation === 'vertical';\n        },\n        focusedItemId() {\n            return isNotEmpty(this.focusedItemInfo.key) ? `${this.$id}_${this.focusedItemInfo.key}` : null;\n        }\n    },\n    components: {\n        MegaMenuSub: MegaMenuSub,\n        BarsIcon: BarsIcon\n    }\n};\n</script>\n", "<template>\n    <div :ref=\"containerRef\" :id=\"$id\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div v-if=\"$slots.start\" :class=\"cx('start')\" v-bind=\"ptm('start')\">\n            <slot name=\"start\"></slot>\n        </div>\n        <!--TODO: menubutton deprecated since v4.0. Use button-->\n        <slot :id=\"$id\" :name=\"$slots.button ? 'button' : 'menubutton'\" :class=\"cx('button')\" :toggleCallback=\"(event) => menuButtonClick(event)\">\n            <a\n                v-if=\"model && model.length > 0\"\n                ref=\"menubutton\"\n                role=\"button\"\n                tabindex=\"0\"\n                :class=\"cx('button')\"\n                :aria-haspopup=\"model.length && model.length > 0 ? true : false\"\n                :aria-expanded=\"mobileActive\"\n                :aria-controls=\"$id\"\n                :aria-label=\"$primevue.config.locale.aria?.navigation\"\n                @click=\"menuButtonClick($event)\"\n                @keydown=\"menuButtonKeydown($event)\"\n                v-bind=\"ptm('button')\"\n            >\n                <!--TODO: menubuttonicon deprecated since v4.0. Use buttonicon-->\n                <slot :name=\"$slots.buttonicon ? 'buttonicon' : 'menubuttonicon'\">\n                    <BarsIcon v-bind=\"ptm('buttonIcon')\" />\n                </slot>\n            </a>\n        </slot>\n        <MegaMenuSub\n            :ref=\"menubarRef\"\n            :id=\"$id + '_list'\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            role=\"menubar\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-disabled=\"disabled || undefined\"\n            :aria-orientation=\"orientation\"\n            :aria-activedescendant=\"focused ? focusedItemId : undefined\"\n            :menuId=\"$id\"\n            :focusedItemId=\"focused ? focusedItemId : undefined\"\n            :items=\"processedItems\"\n            :horizontal=\"horizontal\"\n            :templates=\"$slots\"\n            :activeItem=\"activeItem\"\n            :mobileActive=\"mobileActive\"\n            :level=\"0\"\n            :style=\"sx('rootList')\"\n            :pt=\"pt\"\n            :unstyled=\"unstyled\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @item-click=\"onItemClick\"\n            @item-mouseenter=\"onItemMouseEnter\"\n        />\n        <div v-if=\"$slots.end\" :class=\"cx('end')\" v-bind=\"ptm('end')\">\n            <slot name=\"end\"></slot>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { findSingle, focus, isTouchDevice } from '@primeuix/utils/dom';\nimport { findLastIndex, isEmpty, isNotEmpty, isPrintableCharacter, resolve } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BarsIcon from '@primevue/icons/bars';\nimport BaseMegaMenu from './BaseMegaMenu.vue';\nimport MegaMenuSub from './MegaMenuSub.vue';\n\nexport default {\n    name: 'MegaMenu',\n    extends: BaseMegaMenu,\n    inheritAttrs: false,\n    emits: ['focus', 'blur'],\n    outsideClickListener: null,\n    resizeListener: null,\n    matchMediaListener: null,\n    container: null,\n    menubar: null,\n    searchTimeout: null,\n    searchValue: null,\n    data() {\n        return {\n            mobileActive: false,\n            focused: false,\n            focusedItemInfo: { index: -1, key: '', parentKey: '' },\n            activeItem: null,\n            dirty: false,\n            query: null,\n            queryMatches: false\n        };\n    },\n    watch: {\n        activeItem(newItem) {\n            if (isNotEmpty(newItem)) {\n                this.bindOutsideClickListener();\n                this.bindResizeListener();\n            } else {\n                this.unbindOutsideClickListener();\n                this.unbindResizeListener();\n            }\n        }\n    },\n    mounted() {\n        this.bindMatchMediaListener();\n    },\n    beforeUnmount() {\n        this.mobileActive = false;\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n        this.unbindMatchMediaListener();\n    },\n    methods: {\n        getItemProp(item, name) {\n            return item ? resolve(item[name]) : undefined;\n        },\n        getItemLabel(item) {\n            return this.getItemProp(item, 'label');\n        },\n        isItemDisabled(item) {\n            return this.getItemProp(item, 'disabled');\n        },\n        isItemVisible(item) {\n            return this.getItemProp(item, 'visible') !== false;\n        },\n        isItemGroup(item) {\n            return isNotEmpty(this.getItemProp(item, 'items'));\n        },\n        isItemSeparator(item) {\n            return this.getItemProp(item, 'separator');\n        },\n        getProccessedItemLabel(processedItem) {\n            return processedItem ? this.getItemLabel(processedItem.item) : undefined;\n        },\n        isProccessedItemGroup(processedItem) {\n            return processedItem && isNotEmpty(processedItem.items);\n        },\n        toggle(event) {\n            if (this.mobileActive) {\n                this.mobileActive = false;\n                ZIndex.clear(this.menubar);\n                this.hide();\n            } else {\n                this.mobileActive = true;\n                ZIndex.set('menu', this.menubar, this.$primevue.config.zIndex.menu);\n                setTimeout(() => {\n                    this.show();\n                }, 1);\n            }\n\n            this.bindOutsideClickListener();\n            event.preventDefault();\n        },\n        show() {\n            this.focusedItemInfo = { index: this.findFirstFocusedItemIndex(), level: 0, parentKey: '' };\n\n            focus(this.menubar);\n        },\n        hide(event, isFocus) {\n            if (this.mobileActive) {\n                this.mobileActive = false;\n                setTimeout(() => {\n                    focus(this.$refs.menubutton, { preventScroll: true });\n                }, 1);\n            }\n\n            this.activeItem = null;\n            this.focusedItemInfo = { index: -1, key: '', parentKey: '' };\n\n            isFocus && focus(this.menubar);\n            this.dirty = false;\n        },\n        onFocus(event) {\n            this.focused = true;\n\n            if (this.focusedItemInfo.index === -1) {\n                const index = this.findFirstFocusedItemIndex();\n                const processedItem = this.findVisibleItem(index);\n\n                this.focusedItemInfo = { index, key: processedItem.key, parentKey: processedItem.parentKey };\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedItemInfo = { index: -1, key: '', parentKey: '' };\n            this.searchValue = '';\n            this.dirty = false;\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'PageDown':\n                case 'PageUp':\n                case 'Backspace':\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchItems(event, event.key);\n                    }\n\n                    break;\n            }\n        },\n        onItemChange(event) {\n            const { processedItem, isFocus } = event;\n\n            if (isEmpty(processedItem)) return;\n\n            const { index, key, parentKey, items } = processedItem;\n            const grouped = isNotEmpty(items);\n\n            grouped && (this.activeItem = processedItem);\n            this.focusedItemInfo = { index, key, parentKey };\n\n            grouped && (this.dirty = true);\n            isFocus && focus(this.menubar);\n        },\n        onItemClick(event) {\n            const { originalEvent, processedItem } = event;\n            const grouped = this.isProccessedItemGroup(processedItem);\n            const root = isEmpty(processedItem.parent);\n            const selected = this.isSelected(processedItem);\n\n            if (selected) {\n                const { index, key, parentKey } = processedItem;\n\n                this.activeItem = null;\n                this.focusedItemInfo = { index, key, parentKey };\n\n                this.dirty = !root;\n\n                if (!this.mobileActive) {\n                    focus(this.menubar, { preventScroll: true });\n                }\n            } else {\n                if (grouped) {\n                    this.onItemChange(event);\n                } else {\n                    this.hide(originalEvent);\n                }\n            }\n        },\n        onItemMouseEnter(event) {\n            if (!this.mobileActive && this.dirty) {\n                this.onItemChange(event);\n            }\n        },\n        menuButtonClick(event) {\n            this.toggle(event);\n        },\n        menuButtonKeydown(event) {\n            (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && this.menuButtonClick(event);\n        },\n        onArrowDownKey(event) {\n            if (this.horizontal) {\n                if (isNotEmpty(this.activeItem) && this.activeItem.key === this.focusedItemInfo.key) {\n                    this.focusedItemInfo = { index: -1, key: '', parentKey: this.activeItem.key };\n                } else {\n                    const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                    const grouped = this.isProccessedItemGroup(processedItem);\n\n                    if (grouped) {\n                        this.onItemChange({ originalEvent: event, processedItem });\n                        this.focusedItemInfo = { index: -1, key: processedItem.key, parentKey: processedItem.parentKey };\n                        this.searchValue = '';\n                    }\n                }\n            }\n\n            const itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n\n            this.changeFocusedItemInfo(event, itemIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (event.altKey && this.horizontal) {\n                if (this.focusedItemInfo.index !== -1) {\n                    const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                    const grouped = this.isProccessedItemGroup(processedItem);\n\n                    if (!grouped && isNotEmpty(this.activeItem)) {\n                        if (this.focusedItemInfo.index === 0) {\n                            this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key, parentKey: this.activeItem.parentKey };\n                            this.activeItem = null;\n                        } else {\n                            this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            } else {\n                const itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n\n                this.changeFocusedItemInfo(event, itemIndex);\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n            const grouped = this.isProccessedItemGroup(processedItem);\n\n            if (grouped) {\n                if (this.horizontal) {\n                    const itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n\n                    this.changeFocusedItemInfo(event, itemIndex);\n                }\n            } else {\n                if (this.vertical && isNotEmpty(this.activeItem)) {\n                    if (processedItem.columnIndex === 0) {\n                        this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key, parentKey: this.activeItem.parentKey };\n                        this.activeItem = null;\n                    }\n                }\n\n                const columnIndex = processedItem.columnIndex - 1;\n                const itemIndex = this.visibleItems.findIndex((item) => item.columnIndex === columnIndex);\n\n                itemIndex !== -1 && this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n            const grouped = this.isProccessedItemGroup(processedItem);\n\n            if (grouped) {\n                if (this.vertical) {\n                    if (isNotEmpty(this.activeItem) && this.activeItem.key === processedItem.key) {\n                        this.focusedItemInfo = { index: -1, key: '', parentKey: this.activeItem.key };\n                    } else {\n                        const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                        const grouped = this.isProccessedItemGroup(processedItem);\n\n                        if (grouped) {\n                            this.onItemChange({ originalEvent: event, processedItem });\n                            this.focusedItemInfo = { index: -1, key: processedItem.key, parentKey: processedItem.parentKey };\n                            this.searchValue = '';\n                        }\n                    }\n                }\n\n                const itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n\n                this.changeFocusedItemInfo(event, itemIndex);\n            } else {\n                const columnIndex = processedItem.columnIndex + 1;\n                const itemIndex = this.visibleItems.findIndex((item) => item.columnIndex === columnIndex);\n\n                itemIndex !== -1 && this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            event.preventDefault();\n        },\n        onHomeKey(event) {\n            this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedItemInfo(event, this.findLastItemIndex());\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedItemInfo.index !== -1) {\n                const element = findSingle(this.menubar, `li[id=\"${`${this.focusedItemId}`}\"]`);\n                const anchorElement = element && findSingle(element, 'a[data-pc-section=\"itemlink\"]');\n\n                anchorElement ? anchorElement.click() : element && element.click();\n\n                const processedItem = this.visibleItems[this.focusedItemInfo.index];\n                const grouped = this.isProccessedItemGroup(processedItem);\n\n                !grouped && this.changeFocusedItemInfo(event, this.findFirstFocusedItemIndex());\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        onEscapeKey(event) {\n            if (isNotEmpty(this.activeItem)) {\n                this.focusedItemInfo = { index: this.activeItem.index, key: this.activeItem.key };\n                this.activeItem = null;\n            }\n\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedItemInfo.index !== -1) {\n                const processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n                const grouped = this.isProccessedItemGroup(processedItem);\n\n                !grouped && this.onItemChange({ originalEvent: event, processedItem });\n            }\n\n            this.hide();\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    const isOutsideContainer = this.container && !this.container.contains(event.target);\n                    const isOutsideTarget = !(this.target && (this.target === event.target || this.target.contains(event.target)));\n\n                    if (isOutsideContainer && isOutsideTarget) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = (event) => {\n                    if (!isTouchDevice()) {\n                        this.hide(event, true);\n                    }\n\n                    this.mobileActive = false;\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        bindMatchMediaListener() {\n            if (!this.matchMediaListener) {\n                const query = matchMedia(`(max-width: ${this.breakpoint})`);\n\n                this.query = query;\n                this.queryMatches = query.matches;\n\n                this.matchMediaListener = () => {\n                    this.queryMatches = query.matches;\n                    this.mobileActive = false;\n                };\n\n                this.query.addEventListener('change', this.matchMediaListener);\n            }\n        },\n        unbindMatchMediaListener() {\n            if (this.matchMediaListener) {\n                this.query.removeEventListener('change', this.matchMediaListener);\n                this.matchMediaListener = null;\n            }\n        },\n        isItemMatched(processedItem) {\n            return this.isValidItem(processedItem) && this.getProccessedItemLabel(processedItem)?.toLocaleLowerCase().startsWith(this.searchValue.toLocaleLowerCase());\n        },\n        isValidItem(processedItem) {\n            return !!processedItem && !this.isItemDisabled(processedItem.item) && !this.isItemSeparator(processedItem.item) && this.isItemVisible(processedItem.item);\n        },\n        isValidSelectedItem(processedItem) {\n            return this.isValidItem(processedItem) && this.isSelected(processedItem);\n        },\n        isSelected(processedItem) {\n            return isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n        },\n        findFirstItemIndex() {\n            return this.visibleItems.findIndex((processedItem) => this.isValidItem(processedItem));\n        },\n        findLastItemIndex() {\n            return findLastIndex(this.visibleItems, (processedItem) => this.isValidItem(processedItem));\n        },\n        findNextItemIndex(index) {\n            const matchedItemIndex = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).findIndex((processedItem) => this.isValidItem(processedItem)) : -1;\n\n            return matchedItemIndex > -1 ? matchedItemIndex + index + 1 : index;\n        },\n        findPrevItemIndex(index) {\n            const matchedItemIndex = index > 0 ? findLastIndex(this.visibleItems.slice(0, index), (processedItem) => this.isValidItem(processedItem)) : -1;\n\n            return matchedItemIndex > -1 ? matchedItemIndex : index;\n        },\n        findSelectedItemIndex() {\n            return this.visibleItems.findIndex((processedItem) => this.isValidSelectedItem(processedItem));\n        },\n        findFirstFocusedItemIndex() {\n            const selectedIndex = this.findSelectedItemIndex();\n\n            return selectedIndex < 0 ? this.findFirstItemIndex() : selectedIndex;\n        },\n        findLastFocusedItemIndex() {\n            const selectedIndex = this.findSelectedItemIndex();\n\n            return selectedIndex < 0 ? this.findLastItemIndex() : selectedIndex;\n        },\n        findVisibleItem(index) {\n            return isNotEmpty(this.visibleItems) ? this.visibleItems[index] : null;\n        },\n        searchItems(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let itemIndex = -1;\n            let matched = false;\n\n            if (this.focusedItemInfo.index !== -1) {\n                itemIndex = this.visibleItems.slice(this.focusedItemInfo.index).findIndex((processedItem) => this.isItemMatched(processedItem));\n                itemIndex = itemIndex === -1 ? this.visibleItems.slice(0, this.focusedItemInfo.index).findIndex((processedItem) => this.isItemMatched(processedItem)) : itemIndex + this.focusedItemInfo.index;\n            } else {\n                itemIndex = this.visibleItems.findIndex((processedItem) => this.isItemMatched(processedItem));\n            }\n\n            if (itemIndex !== -1) {\n                matched = true;\n            }\n\n            if (itemIndex === -1 && this.focusedItemInfo.index === -1) {\n                itemIndex = this.findFirstFocusedItemIndex();\n            }\n\n            if (itemIndex !== -1) {\n                this.changeFocusedItemInfo(event, itemIndex);\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedItemInfo(event, index) {\n            const processedItem = this.findVisibleItem(index);\n\n            this.focusedItemInfo.index = index;\n            this.focusedItemInfo.key = isNotEmpty(processedItem) ? processedItem.key : '';\n            this.scrollInView();\n        },\n        scrollInView(index = -1) {\n            const id = index !== -1 ? `${this.$id}_${index}` : this.focusedItemId;\n            let element;\n\n            if (id === null && this.queryMatches) {\n                element = this.$refs.menubutton;\n            } else {\n                element = findSingle(this.menubar, `li[id=\"${id}\"]`);\n            }\n\n            if (element) {\n                element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n            }\n        },\n        createProcessedItems(items, level = 0, parent = {}, parentKey = '', columnIndex) {\n            const processedItems = [];\n\n            items &&\n                items.forEach((item, index) => {\n                    const key = (parentKey !== '' ? parentKey + '_' : '') + (columnIndex !== undefined ? columnIndex + '_' : '') + index;\n                    const newItem = {\n                        item,\n                        index,\n                        level,\n                        key,\n                        parent,\n                        parentKey,\n                        columnIndex: columnIndex !== undefined ? columnIndex : parent.columnIndex !== undefined ? parent.columnIndex : index\n                    };\n\n                    newItem['items'] =\n                        level === 0 && item.items && item.items.length > 0 ? item.items.map((_items, _index) => this.createProcessedItems(_items, level + 1, newItem, key, _index)) : this.createProcessedItems(item.items, level + 1, newItem, key);\n                    processedItems.push(newItem);\n                });\n\n            return processedItems;\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        menubarRef(el) {\n            this.menubar = el ? el.$el : undefined;\n        }\n    },\n    computed: {\n        processedItems() {\n            return this.createProcessedItems(this.model || []);\n        },\n        visibleItems() {\n            const processedItem = isNotEmpty(this.activeItem) ? this.activeItem : null;\n\n            return processedItem && processedItem.key === this.focusedItemInfo.parentKey\n                ? processedItem.items.reduce((items, col) => {\n                      col.forEach((submenu) => {\n                          submenu.items.forEach((a) => {\n                              items.push(a);\n                          });\n                      });\n\n                      return items;\n                  }, [])\n                : this.processedItems;\n        },\n        horizontal() {\n            return this.orientation === 'horizontal';\n        },\n        vertical() {\n            return this.orientation === 'vertical';\n        },\n        focusedItemId() {\n            return isNotEmpty(this.focusedItemInfo.key) ? `${this.$id}_${this.focusedItemInfo.key}` : null;\n        }\n    },\n    components: {\n        MegaMenuSub: MegaMenuSub,\n        BarsIcon: BarsIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["inlineStyles", "rootList", "_ref", "props", "scrollHeight", "overflow", "classes", "root", "_ref2", "instance", "queryMatches", "mobileActive", "horizontal", "vertical", "start", "button", "submenuLabel", "_ref3", "processedItem", "isItemDisabled", "item", "_ref4", "isItemActive", "isItemFocused", "itemContent", "itemLink", "itemIcon", "itemLabel", "submenuIcon", "overlay", "grid", "column", "_ref5", "length", "isItemGroup", "items", "columnClass", "$parentInstance", "submenu", "separator", "end", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "model", "type", "Array", "orientation", "String", "breakpoint", "disabled", "Boolean", "tabindex", "Number", "scrollHeight", "ariaLabelledby", "ariaLabel", "style", "MegaMenuStyle", "provide", "$pcMegaMenu", "$parentInstance", "hostName", "emits", "menuId", "focusedItemId", "horizontal", "submenu", "Object", "mobileActive", "items", "level", "templates", "activeItem", "methods", "getSubListId", "processedItem", "concat", "getItemId", "getSubListKey", "key", "getItemKey", "getItemProp", "params", "item", "resolve", "undefined", "getItemLabel", "getPTOptions", "index", "ptm", "context", "active", "isItemActive", "focused", "isItemFocused", "isItemDisabled", "isNotEmpty", "isItemVisible", "isItemGroup", "onItemClick", "event", "originalEvent", "$emit", "isFocus", "onItemMouseEnter", "getAriaSetSize", "_this", "filter", "length", "getAriaPosInset", "_this2", "slice", "getMenuItemProps", "action", "mergeProps", "cx", "icon", "label", "submenuicon", "components", "AngleRightIcon", "AngleDownIcon", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "$props", "_ctx", "$options", "role", "_toDisplayString", "_Fragment", "_renderList", "id", "_createElementVNode", "onClick", "$event", "onMouseenter", "_withDirectives", "href", "target", "itemicon", "_createBlock", "_resolveDynamicComponent", "ref_for", "hasSubmenu", "col", "_component_MegaMenuSub", "_normalizeStyle", "sx", "pt", "unstyled", "_cache", "onItemMouseenter", "_hoisted_5", "script", "BaseMegaMenu", "inheritAttrs", "outsideClickListener", "resizeListener", "matchMediaListener", "container", "menubar", "searchTimeout", "searchValue", "data", "focusedItemInfo", "parentKey", "dirty", "query", "queryMatches", "watch", "newItem", "bindOutsideClickListener", "bindResizeListener", "unbindOutsideClickListener", "unbindResizeListener", "mounted", "bindMatchMediaListener", "beforeUnmount", "unbindMatchMediaListener", "isItemSeparator", "getProccessedItemLabel", "isProccessedItemGroup", "toggle", "ZIndex", "clear", "hide", "set", "$primevue", "config", "zIndex", "menu", "setTimeout", "show", "preventDefault", "findFirstFocusedItemIndex", "focus", "$refs", "menubutton", "preventScroll", "onFocus", "findVisibleItem", "onBlur", "onKeyDown", "metaKey", "ctrlKey", "code", "onArrowDownKey", "onArrowUpKey", "onArrowLeftKey", "onArrowRightKey", "onHomeKey", "onEndKey", "onSpaceKey", "onEnterKey", "onEscapeKey", "onTabKey", "isPrintableCharacter", "searchItems", "onItemChange", "isEmpty", "grouped", "root", "parent", "selected", "isSelected", "menuButtonClick", "menuButtonKeydown", "itemIndex", "findNextItemIndex", "changeFocusedItemInfo", "altKey", "findFirstItemIndex", "findPrevItemIndex", "findLastFocusedItemIndex", "vertical", "columnIndex", "visibleItems", "findIndex", "findLastItemIndex", "element", "findSingle", "anchorElement", "click", "_this3", "isOutsideContainer", "contains", "isOutsideTarget", "document", "addEventListener", "removeEventListener", "_this4", "isTouchDevice", "window", "_this5", "matchMedia", "matches", "isItemMatched", "_this$getProccessedIt", "isValidItem", "toLocaleLowerCase", "startsWith", "isValidSelectedItem", "_this6", "_this7", "findLastIndex", "_this8", "matchedItemIndex", "_this9", "findSelectedItemIndex", "_this0", "selectedIndex", "char", "_this1", "matched", "clearTimeout", "scrollInView", "$id", "scrollIntoView", "block", "inline", "behavior", "createProcessedItems", "_this10", "arguments", "processedItems", "forEach", "map", "_items", "_index", "push", "containerRef", "el", "menubarRef", "$el", "computed", "reduce", "a", "MegaMenuSub", "BarsIcon", "ref", "ptmi", "$slots", "start", "_renderSlot", "button", "toggleCallback", "_ctx$$primevue$config", "$data", "locale", "aria", "navigation", "onKeydown", "buttonicon", "_createVNode", "_component_BarsIcon", "end"]
}
