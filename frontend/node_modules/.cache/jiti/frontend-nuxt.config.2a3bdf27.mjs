"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _vite = _interopRequireDefault(await jitiImport("@tailwindcss/vite"));
var _aura = _interopRequireDefault(await jitiImport("@primevue/themes/aura"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} // Import des dépendances externes

// Configuration principale de l'application Nuxt.js 3
var _default = exports.default = defineNuxtConfig({
  // Activation des outils de développement
  devtools: { enabled: true },

  // Configuration Vite pour le build et le développement
  vite: {
    // Plugin Tailwind CSS intégré via Vite
    plugins: [(0, _vite.default)()]
  },

  // Modules Nuxt utilisés dans l'application
  modules: ["@pinia/nuxt", "@primevue/nuxt-module"],

  // Configuration complète de PrimeVue
  primevue: {
    options: {
      theme: {
        // Utilisation du thème Aura comme preset de base
        preset: _aura.default,
        options: {
          // Sélecteur CSS personnalisé pour le mode sombre
          darkModeSelector: ".my-app-dark",
          // Configuration des couches CSS pour un ordre de priorité correct
          cssLayer: {
            name: "primevue",
            order: "theme, base, primevue"
          }
        }
      }
    },
    // Liste des composants PrimeVue à inclure automatiquement
    components: {
      include: [
      'Button', 'DataTable', 'Column', 'Card', 'Select', 'InputText', 'Password',
      'MultiSelect', 'Avatar', 'Badge', 'MegaMenu', 'ProgressSpinner', 'ProgressBar',
      'DatePicker', 'Message', 'Toast', 'ConfirmDialog', 'Dialog', 'FileUpload',
      'Dropdown', 'Textarea', 'Breadcrumb', 'InputNumber', 'Slider', 'PanelMenu']

    },
    // Services PrimeVue à inclure
    services: {
      include: ['ToastService']
    },
    // Directives PrimeVue à inclure (ex: v-tooltip)
    directives: {
      include: ['Tooltip']
    }
  },

  // Configuration des composants Vue - auto-import depuis ~/components
  components: [
  {
    path: "~/components", // Chemin vers le dossier components
    pathPrefix: false // Pas de préfixe dans le nom des composants
  }],


  // Configuration Pinia pour la gestion d'état
  pinia: {
    // Import automatique des fonctions Pinia les plus utilisées
    autoImports: ["defineStore", "storeToRefs"]
  },

  // Variables d'environnement et configuration runtime
  runtimeConfig: {
    public: {
      // URL de base de l'API backend, configurable via variable d'environnement
      apiBaseUrl:
      process.env.API_BASE_URL ||
      "http://localhost/suivie-interventions/backend/api"
    }
  },

  // Fichiers CSS globaux à inclure
  css: ["~/assets/css/main.css"],

  // Configuration de l'en-tête HTML de l'application
  app: {
    head: {
      title: "Gestion Interventions",
      meta: [
      {
        name: "description",
        content: "Application de gestion des interventions techniques"
      }]

    }
  },

  // Configuration en mode SPA (Single Page Application) pour l'authentification côté client
  ssr: false
}); /* v9-3019f192330211c5 */
